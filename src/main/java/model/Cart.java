package model;
import java.util.ArrayList;import utility.Logger;

public class Cart {	private ArrayList<Product> items;		/*----- CONSTRUCTOR -----*/	public Cart() {		items = new ArrayList<Product>();	}			public ArrayList<Product> getCartItems() {		return items;	}		public boolean hasItems() {		if(this.items != null) {			if(this.items.size() > 0) {				return true;			}		}				return false;	}			/*----- CART OPERATIONS -----*/	public boolean addItem(Product item) {				// check if the cart is NOT a null object to prevent NullPointerException		if(this.items != null) {						// check if the cart contains products			if(this.items.size() < 1) {								// cart is currently empty, add the item				if(items.add(item)) {					Logger.log("Successfully ADDED an item to the cart!");					return true;				}								Logger.error("Something went wrong. Unable to add item to the cart");				Logger.error("[item-id: " + item.getId() + "]");				return false;											} else {								// if the cart has items, loop through all the products and check if item is already existing in the cart.				Product existing_item = null;				for(int i=0; i < this.items.size(); ++i) {					if(item.getId().equals(this.items.get(i).getId()) ) {						existing_item = this.items.get(i);					}				}								// if the item exists, add the quantity of the current item being added				if(existing_item != null) {					existing_item.setQuantity(existing_item.getQuantity() + item.getQuantity());					Logger.log("Added " + item.getQuantity() + " item/s to the cart");					return true;									} else {					// add the item to the cart					if(this.items.add(item)) {						Logger.log("Succesfully ADDED an item to the cart!");						return true;											} else {						Logger.error("Something went wrong. Unable to add item to the cart.");						Logger.error("[item-id: " + item.getId() + "]");						return false;					}				}							}					}				Logger.error("cart is not initialized");		return false;	}	public boolean removeItem(int index) {		if(this.items != null) {			if(this.hasItems()) {				Product removedItem = this.items.remove(index);				Logger.log("Successfully REMOVED an item from the cart!");								// LOG ITEM INFO				System.out.println("\nREMOVED ITEM: ");				System.out.println("ID: " + removedItem.getId());				System.out.println("Name: " + removedItem.getName());				System.out.println("Price: " + removedItem.getPrice());				System.out.println("Quantity: " + removedItem.getQuantity());				System.out.println("Rating: " + removedItem.getRating() + " stars\n");								return true;			}		}				return false;	}		public Product getItem(int index) {		if(this.items != null) {			return items.get(index);		}				return null;	}
}
